using UnityEngine;
using UnityEditor;
using static UnityEngine.Mathf;

namespace DRL {
	[CustomPropertyDrawer(typeof(ButtonAttribute))]
	public class ButtonDrawer : PropertyDrawer
	{
		#region Static methods generating the required inputs

		/// <summary>
		/// Generates the button's <see cref="GUIContent"/> object,
		/// containing the provided label and [optionally] tooltip.
		/// Tooltip could be modified to reflect the unusual state of the button.
		/// </summary>
		private static GUIContent GenButtonContent(ButtonAttribute attr) {
			GUIContent buttonText = new GUIContent(attr.Label);
			var tooltip = attr.Tooltip;

			// here we perform some modifications to tooltip

			if (tooltip != "")
				buttonText.tooltip = tooltip;
			return buttonText;
		}

		/// <summary>
		/// Calculates the button's <see cref="Rect"/> and <see cref="GUIStyle"/> matching to the provided attribute params.
		/// </summary>
		/// <param name="attr">The main <see cref="ButtonAttribute"/> object this drawer is applied to.</param>
		/// <param name="position">The original <see cref="Rect"/> generated by Unity and passed to <see cref="OnGUI"/>.</param>
		/// <param name="buttonText">The <see cref="GUIContent"/> object, containing text and an [optional] tooltip.</param>
		/// <param name="buttonRect">[out] Generated <see cref="Rect"/> for the button.</param>
		/// <param name="style">
		/// [out] Generated <see cref="GUIStyle"/> for the button.
		/// It's based on the default stule for inspector button, but has it's <see cref="GUIStyle.wordWrap"/> set
		/// acctordingly to the given button content.
		/// </param>
		private static void GenButtonRect(
			ButtonAttribute attr, Rect position, GUIContent buttonText,
			out Rect buttonRect, out GUIStyle style
		) {
			// first, get the desired width in pixels:
			float srcWidth = position.width;
			float width = attr.WidthIsRelative ? srcWidth * attr.WidthRelative : attr.WidthAbsolute;
			width = Min(width, srcWidth);

			// now, take the actual text into account...
			style = EditorGUIUtility.GetBuiltinSkin(EditorSkin.Inspector).button;
			style.wordWrap = false;
			var expectedSize = style.CalcSize(buttonText);
			// ... to get auto width, if given width is less then a pixel:
			if (width < 0.5f) {
				width = Min(expectedSize.x, srcWidth);
			}
			// ... and to calculate the height:
			if (expectedSize.x > width)
				style.wordWrap = true;
			float height = Max(
				style.CalcHeight(buttonText, width),
				position.height
			);

			buttonRect = new Rect(
				position.x + Max(srcWidth - width, 0.0f) * 0.5f,
				position.y,
				width,
				height
			);
		}

		#endregion

		public override void OnGUI(Rect position, SerializedProperty prop, GUIContent label) {
			var attr = (ButtonAttribute)attribute;
			var buttonText = GenButtonContent(attr);

			Rect buttonRect; GUIStyle style;
			GenButtonRect(attr, position, buttonText, out buttonRect, out style);
		}

	}
}