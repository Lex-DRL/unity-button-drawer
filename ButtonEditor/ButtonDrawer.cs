using UnityEngine;
using UnityEditor;
using static UnityEngine.Mathf;

namespace DRL {
	[CustomPropertyDrawer(typeof(ButtonAttribute))]
	public class ButtonDrawer : PropertyDrawer
	{
		#region Private constants

		/// <summary>
		/// The state of the button. It affects it's look.
		/// </summary>
		private enum State
		{
			/// <summary>
			/// The regular state. No special styling.
			/// </summary>
			Normal = 0,
			/// <summary>
			/// The button is in the inspector with multi-selection.
			/// </summary>
			Multi = 1,
			Error = 2
		}

		private const string DefalutText = "DO!";
		private const string MultiMsg = "Multiple objects selected";
		private static readonly Color MultiColor = new Color(0.8f, 0.5f, 0.1f);

		#endregion

		#region Static methods generating the required inputs

		/// <summary>
		/// Generates the button's <see cref="GUIContent"/> object,
		/// containing the provided label and [optionally] tooltip.
		/// Tooltip could be modified to reflect the unusual state of the button.
		/// </summary>
		private static GUIContent ButtonContent(ButtonAttribute attr, State state) {
			string text = attr.Label.Trim();
			if (string.IsNullOrEmpty(text))
				text = DefalutText;

			GUIContent buttonText = new GUIContent(text);
			var tooltip = attr.Tooltip;

			// modify tooltip for Multi-mode:
			if (state == State.Multi) {
				tooltip =
					string.IsNullOrEmpty(tooltip) ?
					MultiMsg :
					$"[{MultiMsg}]\n{tooltip}"
				;
			}

			if (!string.IsNullOrEmpty(tooltip))
				buttonText.tooltip = tooltip;
			return buttonText;
		}

		/// <summary>
		/// Calculates the button's <see cref="Rect"/> and <see cref="GUIStyle"/> matching to the provided attribute params.
		/// </summary>
		/// <param name="attr">The main <see cref="ButtonAttribute"/> object this drawer is applied to.</param>
		/// <param name="state">The <see cref="State"/> of the button, which may change it's look.</param>
		/// <param name="position">The original <see cref="Rect"/> generated by Unity and passed to <see cref="OnGUI"/>.</param>
		/// <param name="buttonText">The <see cref="GUIContent"/> object, containing text and an [optional] tooltip.</param>
		/// <param name="buttonRect">[out] Generated <see cref="Rect"/> for the button.</param>
		/// <param name="style">
		/// [out] Generated <see cref="GUIStyle"/> for the button.
		/// It's based on the default stule for inspector button, but has it's <see cref="GUIStyle.wordWrap"/> set
		/// acctordingly to the given button content.
		/// </param>
		private static void ButtonRectAndStyle(
			ButtonAttribute attr, Rect position, GUIContent buttonText,
			out Rect buttonRect, out GUIStyle style
		) {
			// first, get the desired width in pixels:
			float srcWidth = position.width;
			float width = attr.WidthIsRelative ? srcWidth * attr.WidthRelative : attr.WidthAbsolute;
			width = Min(width, srcWidth);

			// now, take the actual text into account...
			style = EditorGUIUtility.GetBuiltinSkin(EditorSkin.Inspector).button;
			style.wordWrap = false;
			var expectedSize = style.CalcSize(buttonText);
			// ... to get auto width, if given width is less then a pixel:
			if (width < 0.5f) {
				width = Min(expectedSize.x, srcWidth);
			}
			// ... and to calculate the height:
			if (expectedSize.x > width)
				style.wordWrap = true;
			float height = Max(
				style.CalcHeight(buttonText, width),
				position.height
			);

			// generate the actual rect:
			buttonRect = new Rect(
				position.x + Max(srcWidth - width, 0.0f) * 0.5f,
				position.y,
				width,
				height
			);
		}

		#endregion

		public override void OnGUI(Rect position, SerializedProperty prop, GUIContent label) {
			var attr = (ButtonAttribute)attribute;

			// Detect the state of the buton, which affects it look:
			State state;
			UnityEngine.Object[] targets;
			bool isMulti;
			{
				var serObj = prop.serializedObject;
				targets = serObj.targetObjects;
				isMulti = serObj.isEditingMultipleObjects || targets.Length > 0;
				state = isMulti ? State.Multi : State.Normal;
			}

			// Prepare rect, style and content:
			var buttonText = ButtonContent(attr, state);
			Rect buttonRect; GUIStyle style;
			ButtonRectAndStyle(attr, position, buttonText, out buttonRect, out style);
		}

	}
}